{"version":3,"sources":["webpack:///webpack/bootstrap?7f80","webpack:///external \"express-msteams-host\"?e438","webpack:///external \"debug\"?b2c7","webpack:///external \"botbuilder\"?fa14","webpack:///external \"lodash\"?97de","[]","webpack:///external \"botbuilder-dialogs\"?4042","webpack:///./src/app/server.ts?53c8","webpack:///external \"express\"?22fe","webpack:///external \"http\"?8d19","webpack:///external \"path\"?74bb","webpack:///external \"morgan\"?3206","webpack:///external \"compression\"?f791","webpack:///external \"dotenv\"?e70f","webpack:///./src/app/TeamsAppsComponents.ts?b0db","webpack:///./src/app/PersonalTab/PersonalTab.ts?b5f0","webpack:///./src/app/configMathTab/ConfigMathTab.ts?d7c8","webpack:///./src/app/teamWebHooksOutgoingWebhook/TeamWebhooksOutgoingWebhook.ts?8527","webpack:///external \"crypto\"?4c76","webpack:///./src/app/planetBot/planetBot.ts?0c0b","webpack:///./src/app/YouTubePlayerTab/YouTubePlayerTab.ts?09f5","webpack:///./src/app/YouTubePlayerTab/VideoSelectorTaskModule.ts?1a9e","webpack:///./src/app/conversationalBot/ConversationalBot.ts?da55","webpack:///./src/app/conversationalBot/dialogs/HelpDialog.ts?4816","webpack:///./src/app/conversationalBot/dialogs/WelcomeDialog.ts?22b3"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","log","debug","config","express","Express","port","process","env","PORT","use","json","verify","req","res","buf","encoding","rawBody","toString","urlencoded","extended","set","path","join","__dirname","morgan","compression","static","MsTeamsApiRouter","allComponents","MsTeamsPageRouter","root","components","index","http","createServer","listen","nonce","PersonalTab","PreventIframe","ConfigMathTab","TeamWebhooksOutgoingWebhook","selectedPlanet","adaptiveCardSource","actions","url","title","find","body","id","items","text","cardBody","summary","imageAlt","cardDetails","columns","imageLink","facts","numSatellites","solarOrbitYears","Number","solarOrbitAvgDistanceKm","toLocaleString","builder","CardFactory","adaptiveCard","incomingText","message","type","ActivityTypes","Message","filter","planet","trim","toLowerCase","length","getPlanetDetailCard","attachmentLayout","attachments","slice","lastIndexOf","replace","next","incoming","securityToken","SECURITY_TOKEN","auth","headers","authorization","msgBuf","Buffer","from","crypto","createHmac","update","digest","scrubbedText","scrubMessage","processAuthenticatedRequest","send","JSON","stringify","OutgoingWebhookDeclaration","TextEncoder","PlanetBot","TeamsActivityHandler","super","context","action","planets","sortedPlanets","sortBy","map","choices","response","task","card","height","width","Promise","resolve","commandId","data","planetSelector","this","composeExtension","Error","query","searchQuery","parameters","queryResults","push","searchResultsCards","forEach","getPlanetResultCard","wikiLink","heroCard","BotDeclaration","MemoryStorage","MICROSOFT_APP_ID_1","MICROSOFT_APP_PASSWORD_1","YouTubePlayerTab","VideoSelectorTaskModule","ConversationalBot","conversationState","dialogState","createProperty","dialogs","DialogSet","add","onMessage","activity","TurnContext","removeRecipientMention","startsWith","conversation","conversationType","handleMessageMentionMeOneOnOne","handleMessageMentionMeChannelConversation","sendActivity","dc","createContext","beginDialog","undefined","taskModule","videoId","saveChanges","onConversationUpdate","membersAdded","idx","recipient","welcomeCard","onMessageReaction","added","reactionsAdded","textFormat","request","HOSTNAME","getSelectorAdaptiveCard","console","youTubeVideoId","defaultVideoId","version","weight","size","wrap","mention","mentioned","encode","replyActivity","MessageFactory","entities","followupActivity","sendActivities","MICROSOFT_APP_ID_2","MICROSOFT_APP_PASSWORD_2","HelpDialog","Dialog","dialogId","options","endDialog","WelcomeCard"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","module.exports = require(\"express-msteams-host\");","module.exports = require(\"debug\");","module.exports = require(\"botbuilder\");","module.exports = require(\"lodash\");","module.exports = require(\"util\");","module.exports = require(\"botbuilder-dialogs\");","import * as Express from \"express\";\nimport * as http from \"http\";\nimport * as path from \"path\";\nimport * as morgan from \"morgan\";\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport * as compression from \"compression\";\n\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\nlog(`Initializing Microsoft Teams Express hosted App...`);\n\n// Initialize dotenv, to use .env file settings if existing\n// tslint:disable-next-line:no-var-requires\nrequire(\"dotenv\").config();\n\n\n\n// The import of components has to be done AFTER the dotenv config\nimport * as allComponents from \"./TeamsAppsComponents\";\n\n// Create the Express webserver\nconst express = Express();\nconst port = process.env.port || process.env.PORT || 3007;\n\n// Inject the raw request body onto the request object\nexpress.use(Express.json({\n    verify: (req, res, buf: Buffer, encoding: string): void => {\n        (req as any).rawBody = buf.toString();\n    }\n}));\nexpress.use(Express.urlencoded({ extended: true }));\n\n// Express configuration\nexpress.set(\"views\", path.join(__dirname, \"/\"));\n\n// Add simple logging\nexpress.use(morgan(\"tiny\"));\n\n// Add compression - uncomment to remove compression\nexpress.use(compression());\n\n// Add /scripts and /assets as static folders\nexpress.use(\"/scripts\", Express.static(path.join(__dirname, \"web/scripts\")));\nexpress.use(\"/assets\", Express.static(path.join(__dirname, \"web/assets\")));\n\n// routing for bots, connectors and incoming web hooks - based on the decorators\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsApiRouter(allComponents));\n\n// routing for pages for tabs and connector configuration\n// For more information see: https://www.npmjs.com/package/express-msteams-host\nexpress.use(MsTeamsPageRouter({\n    root: path.join(__dirname, \"web/\"),\n    components: allComponents\n}));\n\n// Set default web page\nexpress.use(\"/\", Express.static(path.join(__dirname, \"web/\"), {\n    index: \"index.html\"\n}));\n\n// Set the port\nexpress.set(\"port\", port);\n\n// Start the webserver\nhttp.createServer(express).listen(port, () => {\n    log(`Server running on ${port}`);\n});\n","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"path\");","module.exports = require(\"morgan\");","module.exports = require(\"compression\");","module.exports = require(\"dotenv\");","// Components will be added here\nexport const nonce = {}; // Do not remove!\nexport * from \"./PersonalTab/PersonalTab\";\nexport * from \"./configMathTab/ConfigMathTab\";\nexport * from \"./teamWebHooksOutgoingWebhook/TeamWebhooksOutgoingWebhook\";\nexport * from \"./planetBot/planetBot\";\nexport * from \"./YouTubePlayerTab/YouTubePlayerTab\";\nexport * from \"./YouTubePlayerTab/VideoSelectorTaskModule\";\nexport * from \"./conversationalBot/ConversationalBot\";\n","import { PreventIframe } from \"express-msteams-host\";\n\n/**\n * Used as place holder for the decorators\n */\n@PreventIframe(\"/PersonalTab/index.html\")\n\n\nexport class PersonalTab {\n}\n","import { PreventIframe } from \"express-msteams-host\";\n\n/**\n * Used as place holder for the decorators\n */\n@PreventIframe(\"/configMathTab/index.html\")\n@PreventIframe(\"/configMathTab/config.html\")\n@PreventIframe(\"/configMathTab/remove.html\")\nexport class ConfigMathTab {\n}\n","import * as builder from \"botbuilder\";\r\nimport * as express from \"express\";\r\nimport * as crypto from \"crypto\";\r\nimport { OutgoingWebhookDeclaration, IOutgoingWebhook } from \"express-msteams-host\";\r\nimport { find, sortBy } from \"lodash\";\r\n\r\n/**\r\n * Implementation for TeamWebHooks Outgoing Webhook\r\n */\r\n@OutgoingWebhookDeclaration(\"/api/webhook\")\r\nexport class TeamWebhooksOutgoingWebhook implements IOutgoingWebhook {\r\n\r\n    private static getPlanetDetailCard(selectedPlanet: any): builder.Attachment {\r\n\r\n        // load display card\r\n        const adaptiveCardSource: any = require(\"./planetDisplayCard.json\");\r\n\r\n        // update planet fields in display card\r\n        // adaptiveCardSource.actions[0].url = selectedPlanet.wikiLink;\r\n        adaptiveCardSource.actions[0].url = \"https://docs.microsoft.com/en-us/learn/modules/msteams-webhooks-connectors/3-exercise-outgoing-webhooks\";\r\n        adaptiveCardSource.actions[0].title = adaptiveCardSource.actions[0].title + \" :::Exercise - Create outgoing webhooks\";\r\n        find(adaptiveCardSource.body, { id: \"cardHeader\" }).items[0].text = selectedPlanet.name + \" :::Exercise - Create outgoing webhooks\";\r\n        const cardBody: any = find(adaptiveCardSource.body, { id: \"cardBody\" });\r\n        find(cardBody.items, { id: \"planetSummary\" }).text = selectedPlanet.summary;\r\n        find(cardBody.items, { id: \"imageAttribution\" }).text = \"*Image attribution: \" + selectedPlanet.imageAlt + \"*\";\r\n        const cardDetails: any = find(cardBody.items, { id: \"planetDetails\" });\r\n        cardDetails.columns[0].items[0].url = selectedPlanet.imageLink;\r\n        find(cardDetails.columns[1].items[0].facts, { id: \"orderFromSun\" }).value = selectedPlanet.id;\r\n        find(cardDetails.columns[1].items[0].facts, { id: \"planetNumSatellites\" }).value = selectedPlanet.numSatellites;\r\n        find(cardDetails.columns[1].items[0].facts, { id: \"solarOrbitYears\" }).value = selectedPlanet.solarOrbitYears;\r\n        find(cardDetails.columns[1].items[0].facts, { id: \"solarOrbitAvgDistanceKm\" }).value = Number(selectedPlanet.solarOrbitAvgDistanceKm).toLocaleString();\r\n\r\n        // return the adaptive card\r\n        return builder.CardFactory.adaptiveCard(adaptiveCardSource);\r\n    }\r\n\r\n    private static processAuthenticatedRequest(incomingText: string): Partial<builder.Activity> {\r\n        const message: Partial<builder.Activity> = {\r\n            type: builder.ActivityTypes.Message\r\n        };\r\n\r\n        // load planets\r\n        const planets: any = require(\"./planets.json\");\r\n        // get the selected planet\r\n        const selectedPlanet: any = planets.filter((planet) => (planet.name as string).trim().toLowerCase() === incomingText.trim().toLowerCase());\r\n\r\n        if (!selectedPlanet || !selectedPlanet.length) {\r\n            message.text = `Echo ${incomingText}`;\r\n        } else {\r\n            const adaptiveCard = TeamWebhooksOutgoingWebhook.getPlanetDetailCard(selectedPlanet[0]);\r\n            message.type = \"result\";\r\n            message.attachmentLayout = \"list\";\r\n            message.attachments = [adaptiveCard];\r\n        }\r\n\r\n        return message;\r\n    }\r\n\r\n    private static scrubMessage(incomingText: string): string {\r\n        const cleanMessage = incomingText\r\n            .slice(incomingText.lastIndexOf(\">\") + 1, incomingText.length)\r\n            .replace(\"&nbsp;\", \"\");\r\n        return cleanMessage;\r\n    }\r\n    /**\r\n     * The constructor\r\n     */\r\n    public constructor() {\r\n    }\r\n\r\n    /**\r\n     * Implement your outgoing webhook logic here\r\n     * @param req the Request\r\n     * @param res the Response\r\n     * @param next\r\n     */\r\n    public requestHandler(req: express.Request, res: express.Response, next: express.NextFunction) {\r\n        // parse the incoming message\r\n        const incoming = req.body as builder.Activity;\r\n\r\n        // create the response, any Teams compatible responses can be used\r\n        let message: Partial<builder.Activity> = {\r\n            type: builder.ActivityTypes.Message\r\n        };\r\n\r\n        const securityToken = process.env.SECURITY_TOKEN;\r\n        if (securityToken && securityToken.length > 0) {\r\n            // There is a configured security token\r\n            const auth = req.headers.authorization;\r\n            const msgBuf = Buffer.from((req as any).rawBody, \"utf8\");\r\n            const msgHash = \"HMAC \" + crypto.\r\n                createHmac(\"sha256\", Buffer.from(securityToken as string, \"base64\")).\r\n                update(msgBuf).\r\n                digest(\"base64\");\r\n\r\n            if (msgHash === auth) {\r\n                // Message was ok and verified\r\n                const scrubbedText = TeamWebhooksOutgoingWebhook.scrubMessage(incoming.text)\r\n                message = TeamWebhooksOutgoingWebhook.processAuthenticatedRequest(scrubbedText);\r\n            } else {\r\n                // Message could not be verified\r\n                message.text = `Error: message sender cannot be verified`;\r\n            }\r\n        } else {\r\n            // There is no configured security token\r\n            message.text = `Error: outgoing webhook is not configured with a security token`;\r\n        }\r\n\r\n        // send the message\r\n        res.send(JSON.stringify(message));\r\n    }\r\n\r\n\r\n}\r\n","module.exports = require(\"crypto\");","import {\r\n    TeamsActivityHandler,\r\n    TurnContext,\r\n    MessageFactory,\r\n    CardFactory, MemoryStorage, MessagingExtensionAction, MessagingExtensionActionResponse, MessagingExtensionAttachment,\r\n    MessagingExtensionQuery, MessagingExtensionResponse,\r\n    AppBasedLinkQuery\r\n} from \"botbuilder\";\r\nimport { BotDeclaration, } from \"express-msteams-host\";\r\nimport * as Util from \"util\";\r\n\r\nconst TextEncoder = Util.TextEncoder;\r\n\r\nimport * as debug from \"debug\";\r\nconst log = debug(\"msteams\");\r\n\r\nimport { find, sortBy } from \"lodash\";\r\n\r\n/**\r\n * Implementation for ConversationalBot Bot\r\n * https://portal.azure.com/#home\r\n * 리소스 그룹 추가\r\n * 리소스 그룹 > 리소스 추가 > Bot Channels Registration\r\n * endpoint url 지정: \"/api/messages1\"\r\n */\r\n@BotDeclaration(\r\n    \"/api/messages1\",\r\n    new MemoryStorage(),\r\n    process.env.MICROSOFT_APP_ID_1,\r\n    process.env.MICROSOFT_APP_PASSWORD_1)\r\nexport class PlanetBot extends TeamsActivityHandler {\r\n    constructor() {\r\n        super();\r\n    }\r\n    protected handleTeamsMessagingExtensionFetchTask(context: TurnContext, action: MessagingExtensionAction): Promise<MessagingExtensionActionResponse> {\r\n        // load planets & sort them by their order from the sun\r\n        const planets: any = require(\"./planets.json\");\r\n        const sortedPlanets: any = sortBy(planets, [\"id\"])\r\n            .map((planet) => {\r\n                return { value: planet.id, title: planet.name };\r\n            });\r\n\r\n        // load card template\r\n        const adaptiveCardSource: any = require(\"./planetSelectorCard.json\");\r\n        // locate the planet selector\r\n        const planetChoiceSet: any = find(adaptiveCardSource.body, { id: \"planetSelector\" });\r\n        // update choice set with planets\r\n        planetChoiceSet.choices = sortedPlanets;\r\n        // load the adaptive card\r\n        const adaptiveCard = CardFactory.adaptiveCard(adaptiveCardSource);\r\n\r\n        const response: MessagingExtensionActionResponse = {\r\n            task: {\r\n                type: \"continue\",\r\n                value: {\r\n                    card: adaptiveCard,\r\n                    title: \"Planet Selector\",\r\n                    height: 150,\r\n                    width: 500\r\n                }\r\n            }\r\n        } as MessagingExtensionActionResponse;\r\n\r\n        return Promise.resolve(response);\r\n    }\r\n    protected handleTeamsMessagingExtensionSubmitAction(context: TurnContext, action: MessagingExtensionAction): Promise<MessagingExtensionActionResponse> {\r\n        switch (action.commandId) {\r\n            case \"planetExpanderAction\":\r\n                // load planets\r\n                const planets: any = require(\"./planets.json\");\r\n                // get the selected planet\r\n                const selectedPlanet: any = planets.filter((planet) => planet.id === action.data.planetSelector)[0];\r\n                const adaptiveCard = this.getPlanetDetailCard(selectedPlanet);\r\n\r\n                // generate the response\r\n                return Promise.resolve({\r\n                    composeExtension: {\r\n                        type: \"result\",\r\n                        attachmentLayout: \"list\",\r\n                        attachments: [adaptiveCard]\r\n                    }\r\n                } as MessagingExtensionActionResponse);\r\n                break;\r\n            default:\r\n                throw new Error(\"NotImplemented\");\r\n        }\r\n    }\r\n    protected handleTeamsMessagingExtensionQuery(context: TurnContext, query: MessagingExtensionQuery): Promise<MessagingExtensionResponse> {\r\n        // get the search query\r\n        let searchQuery = \"\";\r\n        if (query && query.parameters && query.parameters[0].name === \"searchKeyword\" && query.parameters[0].value) {\r\n            searchQuery = query.parameters[0].value.trim().toLowerCase();\r\n        }\r\n\r\n        // load planets\r\n        const planets: any = require(\"./planets.json\");\r\n        // search results\r\n        let queryResults: string[] = [];\r\n\r\n        switch (searchQuery) {\r\n            case \"inner\":\r\n                // get all planets inside asteroid belt\r\n                queryResults = planets.filter((planet) => planet.id <= 4);\r\n                break;\r\n            case \"outer\":\r\n                // get all planets outside asteroid belt\r\n                queryResults = planets.filter((planet) => planet.id > 4);\r\n                break;\r\n            default:\r\n                // get the specified planet\r\n                queryResults.push(planets.filter((planet) => planet.name.toLowerCase() === searchQuery)[0]);\r\n        }\r\n\r\n        // get the results as cards\r\n        const searchResultsCards: MessagingExtensionAttachment[] = [];\r\n        queryResults.forEach((planet) => {\r\n            searchResultsCards.push(this.getPlanetResultCard(planet));\r\n        });\r\n\r\n        const response: MessagingExtensionResponse = {\r\n            composeExtension: {\r\n                type: \"result\",\r\n                attachmentLayout: \"list\",\r\n                attachments: searchResultsCards\r\n            }\r\n        } as MessagingExtensionResponse;\r\n\r\n        return Promise.resolve(response);\r\n    }\r\n    protected handleTeamsAppBasedLinkQuery(context: TurnContext, query: AppBasedLinkQuery): Promise<MessagingExtensionResponse> {\r\n        // load planets\r\n        const planets: any = require(\"./planets.json\");\r\n        // get the selected planet\r\n        const selectedPlanet: any = planets.filter((planet) => planet.wikiLink === query.url)[0];\r\n        const adaptiveCard = this.getPlanetDetailCard(selectedPlanet);\r\n\r\n        // generate the response\r\n        return Promise.resolve({\r\n            composeExtension: {\r\n                type: \"result\",\r\n                attachmentLayout: \"list\",\r\n                attachments: [adaptiveCard]\r\n            }\r\n        } as MessagingExtensionActionResponse);\r\n    }\r\n    private getPlanetDetailCard(selectedPlanet: any): MessagingExtensionAttachment {\r\n        // load display card\r\n        const adaptiveCardSource: any = require(\"./planetDisplayCard.json\");\r\n\r\n        // update planet fields in display card\r\n        // adaptiveCardSource.actions[0].url = selectedPlanet.wikiLink;\r\n        adaptiveCardSource.actions[0].url = \"https://docs.microsoft.com/en-us/learn/modules/msteams-messaging-extensions/3-exercise-action-commands\";\r\n        adaptiveCardSource.actions[0].title = adaptiveCardSource.actions[0].title + \":::Exercise - Create action command messaging extensions\";\r\n        find(adaptiveCardSource.body, { id: \"cardHeader\" }).items[0].text = selectedPlanet.name + \":::Exercise - Create action command messaging extensions\";\r\n        const cardBody: any = find(adaptiveCardSource.body, { id: \"cardBody\" });\r\n        find(cardBody.items, { id: \"planetSummary\" }).text = selectedPlanet.summary;\r\n        find(cardBody.items, { id: \"imageAttribution\" }).text = \"*Image attribution: \" + selectedPlanet.imageAlt + \"*\";\r\n        const cardDetails: any = find(cardBody.items, { id: \"planetDetails\" });\r\n        cardDetails.columns[0].items[0].url = selectedPlanet.imageLink;\r\n        find(cardDetails.columns[1].items[0].facts, { id: \"orderFromSun\" }).value = selectedPlanet.id;\r\n        find(cardDetails.columns[1].items[0].facts, { id: \"planetNumSatellites\" }).value = selectedPlanet.numSatellites;\r\n        find(cardDetails.columns[1].items[0].facts, { id: \"solarOrbitYears\" }).value = selectedPlanet.solarOrbitYears;\r\n        find(cardDetails.columns[1].items[0].facts, { id: \"solarOrbitAvgDistanceKm\" }).value = Number(selectedPlanet.solarOrbitAvgDistanceKm).toLocaleString();\r\n\r\n        // return the adaptive card\r\n        return CardFactory.adaptiveCard(adaptiveCardSource);\r\n    }\r\n    private getPlanetResultCard(selectedPlanet: any): MessagingExtensionAttachment {\r\n        return CardFactory.heroCard(selectedPlanet.name + \":::Exercise - Create search command messaging extensions\", selectedPlanet.summary, [selectedPlanet.imageLink]);\r\n    }\r\n}\r\n","import { PreventIframe } from \"express-msteams-host\";\n\n/**\n * Used as place holder for the decorators\n */\n@PreventIframe(\"/YouTubePlayerTab/index.html\")\n\n\nexport class YouTubePlayerTab {\n}\n","import { PreventIframe } from \"express-msteams-host\";\r\n\r\n@PreventIframe(\"/YouTubePlayerTab/selector.html\")\r\n\r\nexport class VideoSelectorTaskModule { }\r\n","\nimport { BotDeclaration, MessageExtensionDeclaration, PreventIframe } from \"express-msteams-host\";\nimport * as debug from \"debug\";\nimport { DialogSet, DialogState } from \"botbuilder-dialogs\";\nimport {\n    StatePropertyAccessor,\n    CardFactory, TurnContext, MemoryStorage, ConversationState,\n    ActivityTypes, TeamsActivityHandler, MessageFactory,\n    TaskModuleTaskInfo, TaskModuleRequest, TaskModuleResponse\n} from \"botbuilder\";\nimport HelpDialog from \"./dialogs/HelpDialog\";\nimport WelcomeCard from \"./dialogs/WelcomeDialog\";\n\nimport * as Util from \"util\";\nconst TextEncoder = Util.TextEncoder;\n\n// Initialize debug logging module\nconst log = debug(\"msteams\");\n\n/**\n * Implementation for ConversationalBot Bot\n * https://portal.azure.com/#home\n * 리소스 그룹 추가\n * 리소스 그룹 > 리소스 추가 > Bot Channels Registration\n * endpoint url 지정: \"/api/messages2\"\n */\n@BotDeclaration(\n    \"/api/messages2\",\n    new MemoryStorage(),\n    process.env.MICROSOFT_APP_ID_2,\n    process.env.MICROSOFT_APP_PASSWORD_2)\n\nexport class ConversationalBot extends TeamsActivityHandler {\n    private readonly conversationState: ConversationState;\n    private readonly dialogs: DialogSet;\n    private dialogState: StatePropertyAccessor<DialogState>;\n\n    /**\n     * The constructor\n     * @param conversationState\n     */\n    public constructor(conversationState: ConversationState) {\n        super();\n\n        this.conversationState = conversationState;\n        this.dialogState = conversationState.createProperty(\"dialogState\");\n        this.dialogs = new DialogSet(this.dialogState);\n        this.dialogs.add(new HelpDialog(\"help\"));\n\n        // Set up the Activity processing\n\n        this.onMessage(async (context: TurnContext): Promise<void> => {\n            // TODO: add your own bot logic in here\n            switch (context.activity.type) {\n                case ActivityTypes.Message:\n                    let text = TurnContext.removeRecipientMention(context.activity);\n                    text = text.toLowerCase();\n                    if (text.startsWith(\"mentionme\")) {\n                        if (context.activity.conversation.conversationType === \"personal\") {\n                            await this.handleMessageMentionMeOneOnOne(context);\n                        } else {\n                            await this.handleMessageMentionMeChannelConversation(context);\n                        }\n                        return;\n                    } else if (text.startsWith(\"hello\")) {\n                        await context.sendActivity(\"Oh, hello to you as well!\");\n                        return;\n                    } else if (text.startsWith(\"help\")) {\n                        const dc = await this.dialogs.createContext(context);\n                        await dc.beginDialog(\"help\");\n                    } else if (text.startsWith(\"exercise\")) {\n                        await context.sendActivity(`Exercise - Creating conversational bots for Microsoft Teams <a href=\"https://docs.microsoft.com/en-us/learn/modules/msteams-conversation-bots/3-exercise-conversation-bots\">Link</a>`);\n                    } else if (text.startsWith(\"learn\")) {\n                        const card = CardFactory.heroCard(\"Learn Microsoft Teams\", undefined, [\n                            {\n                                type: \"invoke\",\n                                title: \"Watch 'Task-oriented interactions in Microsoft Teams with messaging extensions'\",\n                                value: { type: \"task/fetch\", taskModule: \"player\", videoId: \"aHoRK8cr6Og\" }\n                            },\n                            {\n                                type: \"invoke\",\n                                title: \"Watch 'Microsoft Teams embedded web experiences'\",\n                                value: { type: \"task/fetch\", taskModule: \"player\", videoId: \"AQcdZYkFPCY\" }\n                            },\n                            {\n                                type: \"invoke\",\n                                title: \"Watch a invalid action...\",\n                                value: { type: \"task/fetch\", taskModule: \"something\", videoId: \"hello-world\" }\n                            },\n                            {\n                                type: \"invoke\",\n                                title: \"Watch Specific Video\",\n                                value: { type: \"task/fetch\", taskModule: \"selector\", videoId: \"QHPBw7F4OL4\" }\n                            }\n                        ]);\n                        await context.sendActivity({ attachments: [card] });\n                    } else {\n                        await context.sendActivity(`I\\'m terribly sorry, but my master hasn\\'t trained me to do anything yet...`);\n                    }\n                    break;\n                default:\n                    break;\n            }\n            // Save state changes\n            return this.conversationState.saveChanges(context);\n        });\n\n        this.onConversationUpdate(async (context: TurnContext): Promise<void> => {\n            if (context.activity.membersAdded && context.activity.membersAdded.length !== 0) {\n                for (const idx in context.activity.membersAdded) {\n                    if (context.activity.membersAdded[idx].id === context.activity.recipient.id) {\n                        const welcomeCard = CardFactory.adaptiveCard(WelcomeCard);\n                        await context.sendActivity({ attachments: [welcomeCard] });\n                    }\n                }\n            }\n        });\n\n        this.onMessageReaction(async (context: TurnContext): Promise<void> => {\n            const added = context.activity.reactionsAdded;\n            if (added && added[0]) {\n                await context.sendActivity({\n                    textFormat: \"xml\",\n                    text: `That was an interesting reaction (<b>${added[0].type}</b>)`\n                });\n            }\n        });\n    }\n    protected handleTeamsTaskModuleFetch(context: TurnContext, request: TaskModuleRequest): Promise<TaskModuleResponse> {\n        let response: TaskModuleResponse;\n\n        switch (request.data.taskModule) {\n            case \"player\":\n                response = ({\n                    task: {\n                        type: \"continue\",\n                        value: {\n                            title: \"YouTube Player\",\n                            url: `https://${process.env.HOSTNAME}/youTubePlayerTab/player.html?vid=${request.data.videoId}`,\n                            width: 1000,\n                            height: 700\n                        } as TaskModuleTaskInfo\n                    }\n                } as TaskModuleResponse);\n                break;\n            case \"selector\":\n                response = ({\n                    task: {\n                        type: \"continue\",\n                        value: {\n                            title: \"YouTube Video Selector\",\n                            card: this.getSelectorAdaptiveCard(request.data.videoId),\n                            width: 350,\n                            height: 250\n                        } as TaskModuleTaskInfo\n                    }\n                } as TaskModuleResponse);\n                break;\n            default:\n                response = ({\n                    task: {\n                        type: \"continue\",\n                        value: {\n                            title: \"YouTube Player\",\n                            url: `https://${process.env.HOSTNAME}/youTubePlayerTab/player.html?vid=X8krAMdGvCQ&default=1`,\n                            width: 1000,\n                            height: 700\n                        } as TaskModuleTaskInfo\n                    }\n                } as TaskModuleResponse);\n                break;\n        }\n\n        // tslint:disable-next-line: no-console\n        console.log(\"handleTeamsTaskModuleFetch() response\", response);\n        return Promise.resolve(response);\n    }\n    protected handleTeamsTaskModuleSubmit(context: TurnContext, request: TaskModuleRequest): Promise<TaskModuleResponse> {\n        const response: TaskModuleResponse = {\n            task: {\n                type: \"continue\",\n                value: {\n                    title: \"YouTube Player\",\n                    url: `https://${process.env.HOSTNAME}/youTubePlayerTab/player.html?vid=${request.data.youTubeVideoId}`,\n                    width: 1000,\n                    height: 700\n                } as TaskModuleTaskInfo\n            }\n        } as TaskModuleResponse;\n        return Promise.resolve(response);\n    }\n\n    private getSelectorAdaptiveCard(defaultVideoId: string = \"\") {\n        return CardFactory.adaptiveCard({\n            type: \"AdaptiveCard\",\n            version: \"1.0\",\n            body: [\n                {\n                    type: \"Container\",\n                    items: [\n                        {\n                            type: \"TextBlock\",\n                            text: \"YouTube Video Selector\",\n                            weight: \"bolder\",\n                            size: \"extraLarge\"\n                        }\n                    ]\n                },\n                {\n                    type: \"Container\",\n                    items: [\n                        {\n                            type: \"TextBlock\",\n                            text: \"Enter the ID of a YouTube video to show in the task module player.\",\n                            wrap: true\n                        },\n                        {\n                            type: \"Input.Text\",\n                            id: \"youTubeVideoId\",\n                            value: defaultVideoId\n                        }\n                    ]\n                }\n            ],\n            actions: [\n                {\n                    type: \"Action.Submit\",\n                    title: \"Update\"\n                }\n            ]\n        });\n    }\n    private async handleMessageMentionMeOneOnOne(context: TurnContext): Promise<void> {\n        const mention = {\n            mentioned: context.activity.from,\n            text: `<at>${new TextEncoder().encode(context.activity.from.name)}</at>`,\n            type: \"mention\"\n        };\n\n        const replyActivity = MessageFactory.text(`Hi ${mention.text} from a 1:1 chat.`);\n        replyActivity.entities = [mention];\n        await context.sendActivity(replyActivity);\n    }\n    private async handleMessageMentionMeChannelConversation(context: TurnContext): Promise<void> {\n        const mention = {\n            mentioned: context.activity.from,\n            text: `<at>${new TextEncoder().encode(context.activity.from.name)}</at>`,\n            type: \"mention\"\n        };\n\n        const replyActivity = MessageFactory.text(`Hi ${mention.text}!`);\n        replyActivity.entities = [mention];\n        const followupActivity = MessageFactory.text(`*We are in a channel conversation*`);\n        await context.sendActivities([replyActivity, followupActivity]);\n    }\n\n}\n","import { Dialog, DialogContext, DialogTurnResult } from \"botbuilder-dialogs\";\n\nexport default class HelpDialog extends Dialog {\n    constructor(dialogId: string) {\n        super(dialogId);\n    }\n\n    public async beginDialog(context: DialogContext, options?: any): Promise<DialogTurnResult> {\n        context.context.sendActivity(`I'm just a friendly but rather stupid bot, and right now I don't have any valuable help for you!`);\n        return await context.endDialog();\n    }\n}\n","import WelcomeCard = require(\"./WelcomeCard.json\");\n\nexport default WelcomeCard;\n"],"sourceRoot":""}